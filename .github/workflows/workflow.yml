name: ayno workflow to ec2 (SSM)

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application-dev.yml 파일 생성하기
        run: |
          echo "${{ secrets.APPLICATION_DEV_YML }}" | base64 --decode > ./src/main/resources/application-dev.yml

      - name: 빌드 권한 부여
        run: chmod +x ./gradlew

      - name: Test제외 & Build
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t ayno .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag ayno ${{ steps.login-ecr.outputs.registry }}/ayno:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/ayno:latest

      # --- SSM로 원격 배포 ---
      # 방법 A: 인스턴스 ID를 시크릿으로 보관 (EC2_INSTANCE_ID)
      - name: Deploy via SSM (pull & run)
        env:
          INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REGION: ap-northeast-2
        run: |
          CMD_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "AYNO 워크플로우 실행" \
            --parameters commands='[
              "set -e",
              "aws ecr get-login-password --region '"$REGION"' | sudo docker login --username AWS --password-stdin '"$REGISTRY"'",
              "sudo docker stop ayno || true",
              "sudo docker rm ayno || true",
              "sudo docker pull '"$REGISTRY"'/ayno:latest",
              "sudo docker run -d --name ayno --restart=unless-stopped -p 8080:8080 '"$REGISTRY"'/ayno:latest"
            ]' \
            --region "$REGION" \
            --query "Command.CommandId" --output text)

          for i in {1..40}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$CMD_ID" \
              --instance-id "$INSTANCE_ID" \
              --region "$REGION" \
              --query "Status" --output text || true)
            echo "SSM status: $STATUS"
            if [ "$STATUS" = "Success" ]; then exit 0; fi
            if [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then exit 1; fi
            sleep 5
          done
          echo "SSM command timed out"; exit 1
